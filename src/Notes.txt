"Magic Square"

В данном программном решении применен не совсем верный подход к движению квадрата:
проверка возможности движения в ту или иную сторону осуществляется непосредственно
по нажатию на кнопки, и, если таковое движение возможно, то осуществляется перемещение
квадрата по сетке. При данном подходе не представляется возможным заблаговременно
задеактивировать ту или иную кнопку, отвечающую за движение в запрещенном направлении.
Равно как и эффективно использовать коллбэки на движение.
Идеологически - не совсем корректен тот интерфейс, на котором пользователь осуществляет
некое управляющее воздействие, которое по каким-либо причинам игнорируется впринципе
или пользователю возвращается некое сообщение об ошибке/невозможности действия.
Другими словами: хороший интерфейс (пользовательский, программный) - это такой
интерфейс, который "подблочивает" управление ("рычаги воздействия") там, где
таковое управление/воздействие запрещено/невозможно.

// Инициализация состояния Магического Квадрата
let [magicSquare, setMagicSquare] = useState<MagicSquareType>({rowGridNumber: 6, columnGridNumber: 9,
  value: getRandomValue(magicTable.minValue, magicTable.maxValue), x: 0, y: 0, canMove: false})

// Инициализация массива значений клеток игрового поля
let [grid, setGrid] = useState<Array<Array<number>>>(getNumberedGrid(magicTable))

<ul>
  {animals.map((animal, index) => (
    <li key={index}>{animal}</li>
  ))}
</ul>

let arr = new Array(9, 6);

.App-header {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
}